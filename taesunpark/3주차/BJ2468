import java.util.*;
import java.io.*;

public class Main {
	
	
	public static int[][] map;
	public static int[] dx = {-1,0,1,0};
	public static int[] dy = {0,1,0,-1};
	public static boolean[][] visited;
	public static HashSet<Integer> set;
	public static int n;
	public static int result;	
	
	public static void main(String[] args) throws IOException{
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		n = Integer.parseInt(br.readLine());
		StringTokenizer st;
		set = new HashSet<>();
		map = new int[n][n];
		visited = new boolean[n][n];
		
		for(int i = 0; i < n; i++) {
			st = new StringTokenizer(br.readLine());
			
			for(int j = 0; j < n; j++) {
				map[i][j] = Integer.parseInt(st.nextToken());
				set.add(map[i][j]);
			}
		}
		
		Iterator<Integer> iter = set.iterator();
		
		while(iter.hasNext()) {
			int[][] temp = serve(iter.next());						
			
			int size = 0;
			visited = new boolean[n][n];
					
			for(int i = 0; i < n; i++) {
				for(int j = 0; j < n; j++) {
					if(visited[i][j] == true) continue;
					if(temp[i][j] == 0) continue;
					bfs(temp, j, i);
					size++;
				}
			}			
									
			result = Math.max(size, result);
		}
		
		System.out.println(result);
		
	}
	
	public static void bfs(int[][] m, int x, int y) {
				
		Queue<Node> queue = new LinkedList<Node>();
		
		queue.add(new Node(x, y));
		visited[y][x] = true;
		
		
		while(!queue.isEmpty()) {
			Node node = queue.poll();
			
			for(int i = 0; i < 4; i++) {
				int next_x = node.x + dx[i];
				int next_y = node.y + dy[i];
				
				if(next_x < 0 || next_x >= n || next_y >= n || next_y < 0) continue;
				if(visited[next_y][next_x] == true) continue;
				if(m[next_y][next_x] == 0) continue;
				visited[next_y][next_x] = true;
				queue.add(new Node(next_x, next_y));
			}
		}
		
	}
	
	public static class Node{
		int x; 
		int y;
		public Node(int x, int y) {
			this.x = x;
			this.y = y;
		}
	}
	
	
	public static int[][] serve(int depth){
		
		int[][] temp = new int[n][n];		
		
		for(int i = 0; i < n; i++) {
			for(int j = 0; j < n; j++) {
				if(map[i][j] >= depth) {
					temp[i][j] = 1; 
				}else {
					temp[i][j] = 0;
				}
			}
		}
		
		return temp;		
	}

}

