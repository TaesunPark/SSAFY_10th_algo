import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.StringTokenizer;

public class Main {

    public static int result;
    public static int M;
    public static int[] tmp;
    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st = new StringTokenizer(br.readLine());
        int N = Integer.parseInt(st.nextToken());
        M = Integer.parseInt(st.nextToken());
        result = -1;
        int[] arr = new int[N + 1];
        st = new StringTokenizer(br.readLine());

        for (int i = 1; i <= N; i++){
            arr[i] = Integer.parseInt(st.nextToken());
        }
        tmp = new int[N + 1];
        merge_sort(arr, 1, N);
        System.out.print(-1);
    }

    public static void merge_sort(int[] A, int p, int r){
        if (p < r){
            int q = (p + r) / 2;
            merge_sort(A, p, q);
            merge_sort(A, q + 1 ,r);
            if (merge(A, p, q, r) == 2){
                return;
            }
        }
    }

    public static int merge(int[] A, int p, int q, int r){
        int i = p;
        int j = q + 1;
        int t = 1;        

        while (i <= q && j <= r){
            if (A[i] <= A[j]){
                tmp[t++] = A[i++];
            } else{
                tmp[t++] = A[j++];
            }
        }

        while (i <= q){
            tmp[t++] = A[i++];
        }

        while (j <= r){
            tmp[t++] = A[j++];
        }

        i = p;
        t = 1;

        while (i <= r){
            M--;
            if (M == 0){
                result = tmp[t];
                System.out.print(result);
                System.exit(0);
                return 2;
            }

            A[i++] = tmp[t++];
        }

        return 0;
    }

}

